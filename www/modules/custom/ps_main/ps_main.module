<?php

/**
 * @file
 * Contains ps_main.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function ps_main_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ps_main module.
    case 'help.page.ps_main':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Main functions for PS120.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function ps_main_theme() {
  return [
    'ps_main' => [
      'render element' => 'children',
    ],
    'title_simple' => [
      'variables' => [
        'title' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORMID_alter.
 */
function ps_main_form_contact_message_feedback_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['actions']['preview'])) {
    $form['actions']['preview']['#access'] = FALSE;
  }
}

function ps_main_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Global settings for forms which have drupal-menu settings available.
  if (isset ($form['menu'])) {
    // Menu options always open.
    $form['menu']['#open'] = true;
    // For specific CT, default to checked for the menu item radio,
    // but only for new nodes - not existing ones.
    $types = _ps_main_menu_force_content_types();
    foreach($types as $string) {
      $node = Drupal::request()->attributes->get('node');
      $test = strpos($form_id, $string);
      if ($test !== false && $node == null) {
        $form['menu']['enabled']['#default_value'] = 1;
      }
    }
    // Add js library.
    $form['#attached']['library'][] = 'ps_main/ps-main';
  }

  // Chosen field width
  if (isset($form['field_artists'])) {

  }
  $t=1;


  // PLUpload settings for field_images.
  // $image_fields = [
  //   // 'field_image_main' => t('Main image'),
  //   // user for single image fields, once we know how to limit the count.
  //   'field_images' => t('Images'),
  // ];
  // foreach ($image_fields as $key => $label) {
  //   if (isset($form[$key])) {
  //     $t=1;
  //     $form[$key] = [
  //       '#type' => 'plupload',
  //       '#title' => $label,
  //       '#description' => t('Drag and drop or click to uplaod.'),
  //       '#autoupload' => TRUE,
  //       // '#autosubmit' => TRUE,
  //       // '#submit_element' => '#id-of-your-submit-element',
  //       '#upload_validators' => [
  //         'file_validate_extensions' => ['jpg jpeg gif png'],
  //         // 'my_custom_file_validator' => array('some validation criteria'),
  //       ],
  //       '#plupload_settings' => [
  //         'runtimes' => 'html5',
  //         'chunk_size' => '1mb',
  //       ],
  //       // '#event_callbacks' => array(
  //       //   'FilesAdded' => 'Drupal.mymodule.filesAddedCallback',
  //       //   'UploadComplete' => 'Drupal.mymodule.uploadCompleteCallback',
  //       // ),
  //     ];


  //   }
  // }

}

/**
 * CTs which should automatically be checked for menu item selection when creating a node
 */
function _ps_main_menu_force_content_types() {
  return [
    'artist',
    // 'exhibition',
  ];
}



/**
 * Implements hook_entity_extra_field_info().
 */
function ps_main_entity_extra_field_info() {
  $extra_field = [];
  $bundles = [
    'exhibition',
    'artist',
  ];
  foreach ($bundles as $label) {
    $extra_field['node'][$label]['display']['field_title'] = [
      'label' => t('Custom Title'),
      'description' => t('Content title as a simple field.'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  return $extra_field;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function ps_main_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full') {
    // Add pseudo-fields.
    if ($display->getComponent('field_title')) {
      $build['field_title'] = [
        '#type' => 'markup',
        '#theme' => 'title_simple',
        '#title' => $entity->title->value,
      ];
    }
  }
}