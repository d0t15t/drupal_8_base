<?php

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function field_formatter_range_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $element = array();
  $cardinality = 1;
  // Figure out the type of the field.
  if ($field_definition instanceof \Drupal\Core\Field\BaseFieldDefinition) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition **/
    $cardinality = $field_definition->getCardinality();
  } elseif ($field_definition instanceof \Drupal\field\Entity\FieldConfig) {
    /** @var Drupal\field\Entity\FieldConfig $field_definition **/
    $cardinality = $field_definition->getFieldStorageDefinition()->getCardinality();
  }

  // If only one one value is provided the range has no meaning.
  if ($cardinality == 1) {
    return $element;
  }

  $element['reverse'] = [
    '#type' => 'checkbox',
    '#title' => t('Reverse order'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_range', 'reverse', 0),
    '#description' => t('Displays the items in reversed order. This can be used to display only the latest image when used with the limit setting.')
  ];

  $element['limit'] = array(
    '#type' => 'number',
    '#title' => t('Display items'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_range', 'limit', 0),
    '#required' => TRUE,
    '#min' => 0,
    '#max' => $cardinality == FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED ? 100 : $cardinality,
    '#description' => t('Number of items to display. Set to 0 to display all items.')
  );

  $element['offset'] = array(
    '#type' => 'number',
    '#title' => t('Skip items'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_range', 'offset', 0),
    '#required' => TRUE,
    '#min' => 0,
    '#description' => t('Number of items to skip from the beginning.')
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_range_field_formatter_settings_summary_alter(&$summary, $context) {
  // Display the range information.
  $cardinality = 1;
  // Figure out the type of the field.
  if ($context['field_definition'] instanceof \Drupal\Core\Field\BaseFieldDefinition) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition **/
    $cardinality = $context['field_definition']->getCardinality();
  } elseif ($context['field_definition'] instanceof \Drupal\field\Entity\FieldConfig) {
    /** @var Drupal\field\Entity\FieldConfig $field_definition **/
    $cardinality = $context['field_definition']->getFieldStorageDefinition()->getCardinality();
  }

  // If only one one value is provided the range has no meaning.
  if ($cardinality == 1) {
    return;
  }

  // Get the settings.
  $reverse = $context['formatter']->getThirdPartySetting('field_formatter_range', 'reverse', 0);
  $offset = $context['formatter']->getThirdPartySetting('field_formatter_range', 'offset', 0);
  $limit = $context['formatter']->getThirdPartySetting('field_formatter_range', 'limit', 0);

  // Create the message.
  if (empty($reverse)) {
    $message = (empty($limit) || $limit == $cardinality)
      ? t('Display all items.')
      : \Drupal::translation()->formatPlural($limit, 'Display 1 item.', 'Display @n items.', ['@n' => $limit]);
  } else {
    $message = (empty($limit) || $limit == $cardinality)
      ? t('Display all items in reversed order.')
      : \Drupal::translation()->formatPlural($limit, 'Display 1 item in reversed order.', 'Display @n items in reversed order.', ['@n' => $limit]);
  }

  if (!empty($offset)) {
    $message .= ' ' . t('Offset by @n.', ['@n' => $offset]);
  }

  // Display the information.
  $summary[] = $message;
}

/**
 * Implements hook_entity_view_alter().
 */
function field_formatter_range_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  foreach ($display->getComponents() AS $field => $field_information) {
    // Make sure the field if displayed.
    if (isset($build[$field])) {
      if (isset($field_information['third_party_settings'])) {
        $settings = $field_information['third_party_settings'];
        if (isset($settings['field_formatter_range'])) {
          // Get the settings.
          $reverse = !empty($settings['field_formatter_range']['reverse']) ? (int) $settings['field_formatter_range']['reverse'] : 0;
          $offset = !empty($settings['field_formatter_range']['offset']) ? (int) $settings['field_formatter_range']['offset'] : 0;
          $limit = !empty($settings['field_formatter_range']['limit']) ? (int) $settings['field_formatter_range']['limit'] : 0;

          // Get the children.
          $children = Element::children($build[$field]);

          // Reverse them if needed.
          if (!empty($reverse)) {
            $children = array_reverse($children);
          }

          // Set limit to NULL so we wan work only with offset if needed.
          $limit = empty($limit) ? NULL : $limit;

          // Process items accordingly if offset or limit is set.
          if (!empty($offset) || !empty($limit)) {
            $children = array_slice($children, $offset, $limit);
          }

          // If any of the settings is enabled we'll process the items
          // since deltas have to start from 0 and we already have
          // the proper items in proper order.
          if (!empty($reverse) || !empty($offset) || !empty($limit)) {
            // Get the items we'll display.
            $items = [];
            foreach ($children AS $child) {
              $items[] = $build[$field][$child];
            }

            // Remove all the existing items so we can display only
            // the ones we want.
            foreach (Element::children($build[$field]) AS $child) {
              unset($build[$field][$child]);
            }

            // Put the items that we want to display back into the display.
            $build[$field] += $items;
          }
        }
      }
    }
  }
}
