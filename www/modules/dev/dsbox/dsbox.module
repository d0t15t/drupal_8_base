<?php

/**
 * @file
 * Provides an image and link field formatter with the Swipebox jQuery plugin.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Extension\Extension;

/**
 * The Swipebox vendor website URL.
 */
define('DSBOX_WEBSITE_URL', 'http://brutaldesign.github.io/swipebox/');

/**
 * The Swipebox vendor download URL.
 */
define('DSBOX_DOWNLOAD_URL', 'https://github.com/brutaldesign/swipebox/');

/**
 * The Swipebox jquery.swipebox.js source URL.
 */
define ('DSBOX_LIBRARY_SOURCE_JS_URL', 'https://raw.githubusercontent.com/brutaldesign/swipebox/master/src/js/jquery.swipebox.js');

/**
 * Swipebox version pattern.
 */
define('DSBOX_LIBRARY_VERSION_PATTERN', '@Swipebox\s?v([0-9a-zA-Z\.]+)@');

/**
 * Implements hook_help().
 */
function dsbox_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.dsbox':
      $readme = check_markup(file_get_contents(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'README.txt'), 'plain_text');
      // Parse all example URL formats to string output on the help page.
      $readme = preg_replace("/\<a href\=\"http\:\/\/www\.youtube\.com\/watch\?v\=\"\>http\:\/\/www\.youtube\.com\/watch\?v\=\<\/a\>/m", 'http://www.youtube.com/watch?v=', $readme);
      $readme = preg_replace("/\<a href\=\"https\:\/\/www\.youtube\.com\/watch\?v\=\"\>https\:\/\/www\.youtube\.com\/watch\?v\=\<\/a\>/m", 'https://www.youtube.com/watch?v=', $readme);
      $readme = preg_replace("/\<a href\=\"http\:\/\/youtube\.com\/watch\?v\=\"\>http\:\/\/youtube\.com\/watch\?v\=\<\/a\>/m", 'http://youtube.com/watch?v=', $readme);
      $readme = preg_replace("/\<a href\=\"https\:\/\/youtube\.com\/watch\?v\=\"\>https\:\/\/youtube\.com\/watch\?v\=\<\/a\>/m", 'https://youtube.com/watch?v=', $readme);
      $readme = preg_replace("/\<a href\=\"http\:\/\/youtu\.be\/XSGBVzeBUbk\"\>http\:\/\/youtu\.be\/XSGBVzeBUbk\<\/a\>/m", 'http://youtu.be/XSGBVzeBUbk', $readme);
      $readme = preg_replace("/\<a href\=\"https\:\/\/youtu\.be\/XSGBVzeBUbk\"\>https\:\/\/youtu\.be\/XSGBVzeBUbk\<\/a\>/m", 'https://youtu.be/XSGBVzeBUbk', $readme);
      $readme = preg_replace("/\<a href\=\"http\:\/\/vimeo\.com\/54178821\"\>http\:\/\/vimeo\.com\/54178821\<\/a\>/m", 'http://vimeo.com/54178821', $readme);
      $readme = preg_replace("/\<a href\=\"https\:\/\/vimeo\.com\/54178821\"\>https\:\/\/vimeo\.com\/54178821\<\/a\>/m", 'https://vimeo.com/54178821', $readme);

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= $readme;

      return $output;
  }
}

/*
 * Implements hook_system_info_alter().
 *
 * Protect the module uninstall if a module fieldformatter in use.
 */
function dsbox_system_info_alter(&$info, Extension $file, $type) {
  // It is not safe to call entity_load_multiple_by_properties() during
  // maintenance mode.
  if ($type == 'module' && !defined('MAINTENANCE_MODE')) {
    $image_fields = entity_load_multiple_by_properties('field_storage_config', array('module' => 'image', 'include_deleted' => TRUE));
    $link_fields = entity_load_multiple_by_properties('field_storage_config', array('module' => 'link', 'include_deleted' => TRUE));
    $fields = array_merge($image_fields, $link_fields);

    // Only the display view usage are checked.
    // The form display view usage (widget usage) are not checked.
    $formatter_used = FALSE;
    if ($fields && $file->getName() === 'dsbox') {
      foreach ($fields as $field) {
        foreach ($field->getBundles() as $bundle) {
          if (($formatter_used = _dsbox_field_formatter_check($bundle, $field, \Drupal::entityManager()->getViewModeOptions($field->entity_type, TRUE)))) {
            break;
          }
        }

        if ($formatter_used) {
          break;
        }
      }
    }

    if ($file->getName() === 'dsbox' && $formatter_used) {
      $info['required'] = TRUE;
      $info['explanation'] = t('Field formatter(s) in use');
    }

  }
}

/**
 * Implements hook_theme().
 */
function dsbox_theme() {
  return array(
    'dsbox_image_formatter' => array(
      'variables' => array(
        'image_original_uri' => NULL,
        'item' => NULL,
        'item_filename' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'swipebox_image_style' => NULL,
        'swipebox_fallback_image_style' => NULL,
        'swipebox_gallery' => NULL,
        'swipebox_gallery_custom' => NULL,
        'swipebox_caption' => NULL,
        'swipebox_caption_custom' => NULL,
        'breakpoints' => array(),
        'entity' => NULL,
        'entity_type' => NULL,
        'field_definition' => NULL,
        'parent_entity' => NULL,
        'parent_entity_id' => NULL,
        'item_attributes' => NULL
      ),
      'template' => 'dsbox-image-formatter',
      'file' => 'dsbox.field.inc'
    ),
    'dsbox_link_formatter_video_link' => array(
       'variables' => array(
         'linktext' => NULL,
         'linkurl' => NULL,
         'href' => NULL,
         'options' => array()
       ),
       'template' => 'dsbox-link-formatter-video-link',
       'file' => 'dsbox.field.inc'
    )
  );
}

/**
 * Implements hook_cron().
 */
function dsbox_cron() {
  $dsbox_config = \Drupal::config('dsbox.settings');

  $frequency = $dsbox_config->get('interval_days') ?: 14;
  $interval = 60 * 60 * 24 * $frequency;

  $last_check = $dsbox_config->get('swipebox_last_check') ?: 0;
  if ((REQUEST_TIME - $last_check) > $interval) {
    // Local Swipebox library.
    $lib_local_version = dsbox_get_local_library_version();

    // Update setting for the local version.
    if ($lib_local_version > 0 && version_compare($lib_local_version, $dsbox_config->get('swipebox_local_version'), '>')) {
      \Drupal::config('dsbox.settings')->set('swipebox_local_version', $lib_local_version)->save();
    }

    // Current Swipebox library.
    $current_version = 0;
    // Get the current library file from vendor.
    $data = dsbox_retrieve_file();

    if ($data) {
      // Get the version from the current vendor file.
      $current_version = dsbox_get_version($data);

      // Update setting last check
      // only if exist data from the current vendor version check action.
      \Drupal::config('dsbox.settings')->set('swipebox_last_check', REQUEST_TIME)->save();

      // Inform watchdog if a newer vendor version detected.
      if (\Drupal::moduleHandler()->moduleExists('dblog')) {
        if (version_compare($dsbox_config->get('swipebox_local_version'), $current_version, '<')) {
          $message = t('Swipebox jQuery library, new version %version available. See Drupal Swipebox module README.txt or the Drupal Swipebox help content for install instructions.', array('%version' => $current_version));
          $context = array('channel' => 'Dsbox');
          \Drupal::logger('dblog')->log(\Drupal\Core\Logger\RfcLogLevel::INFO, $message, $context);
        }
      }

      // Update checked version
      // for later use with better performance.
      if (version_compare($dsbox_config->get('swipebox_local_version'), $current_version, '<=')) {
        \Drupal::config('dsbox.settings')->set('swipebox_checked_version', $current_version)->save();
      }

      // The version $dsbox_config->get('swipebox_checked_version') is the
      // available vendor version, detected on last succesful cron action.
    }
  }
}

/**
 * Helper function.
 *
 * @param string $entity_type
 *   (optional) The string contains a entity type name.
 *
 * @return array
 *   The associative array contains swipebox gallery grouping options.
 */
function dsbox_gallery_options($entity_type = FALSE) {
  switch ($entity_type) {
    case 'node':
      $options =  array(
        'none' => t('No gallery grouping'),
        'post' => t('Per post gallery'),
        'page' => t('Per page gallery'),
        'entity_type' => t('Per entity type gallery'),
        'field' => t('Per field gallery'),
        'custom' => t('Custom')
      );
      break;
    default:
      $options =  array(
        'none' => t('No gallery grouping'),
        'page' => t('Per page gallery'),
        'entity_type' => t('Per entity type gallery'),
        'field' => t('Per field gallery'),
        'custom' => t('Custom')
      );
      break;
  }

  return $options;
}

/**
 * Helper function.
 *
 * @param string $entity_type
 *   (optional) A string contains a entity type name.
 *
 * @return array
 *   The associative array contains swipebox caption options.
 */
function dsbox_caption_options($entity_type = FALSE) {
  switch ($entity_type) {
    case 'node':
      $options = array(
        'none' => t('No caption'),
        'auto' => t('Automatic'),
        'title' => t('Title text'),
        'alt' => t('Alt text'),
        'content_title' => t('Content title'),
        'custom' => t('Custom')
      );
      break;
    default:
      $options = array(
        'none' => t('No caption'),
        'auto' => t('Automatic'),
        'title' => t('Title text'),
        'alt' => t('Alt text'),
        'custom' => t('Custom')
      );
      break;
  }

  return $options;
}

/**
 * Ceck if a given style a image style or picture mapping.
 *
 * @param string $key
 *   The string contains a Swipebox image style as option key.
 *
 * @return string
 *   Possible values: mapping, style
 */
function dsbox_check_style($key) {
  $checked = &drupal_static(__FUNCTION__);

  if (!isset($checked[$key])) {
    if (preg_match("/^pm-.*/", $key)) {
      $checked[$key] =  'mapping';
    }
    else {
      $checked[$key] = 'style';
    }
  }

  return $checked[$key];
}

/**
 * Returns the URL for an image derivative given a style and image item.
 *
 * @param string $style_name
 *   The name of the style to be used with this image.
 *
 * @param array $item
 *   An associative array contains the file entity object.
 *
 * @return string
 *   The URL of the image with the given image style.
 */
function dsbox_image_style_url($style_name, $item) {
  $style = _dsbox_get_image_style($style_name);
  // The stream URI to the image derivative for the style.
  $style_uri = $style->buildUri($item->entity->getFileUri());
  // Creates a web-accessible URL for the stream to the image style file.
  $style_url = file_create_url($style_uri);

  return $style_url;
}

/**
 * Attempts to get a file using a HTTP request.
 *
 * @param string $url
 *   (optional) String contains the URL to get the file.
 *
 * @return string|bool
 *   String contains the file data on success. FALSE on failure.
 *
 * @see dsbox_cron()
*/
function dsbox_retrieve_file($url = FALSE) {
  $url = $url ? $url : DSBOX_LIBRARY_SOURCE_JS_URL;

  try {
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CRLF, TRUE);

    $data = curl_exec($ch);
    curl_close($ch);

    if (empty($data)) {
      return FALSE;
    }
  }
  catch (Exception $ex) {
    return FALSE;
  }

  return $data;
}

/**
 * Get the version from the local installed Swipebox jQuery library.
 *
 * @return int
 *   The version number. The number is 0 if the library file is not found.
 */
function dsbox_get_local_library_version() {
  $lib_local_version = 0;

  $lib_local_path = libraries_get_path('swipebox');
  $lib_local_path .= DIRECTORY_SEPARATOR . 'src'. DIRECTORY_SEPARATOR . 'js' . DIRECTORY_SEPARATOR . 'jquery.swipebox.js';

  if (file_exists($lib_local_path)) {
    $lib_local_data = file_get_contents($lib_local_path, NULL, NULL, 0, 250);
    if ($lib_local_data) {
      $lib_local_version = dsbox_get_version($lib_local_data);
    }
  }

  return $lib_local_version;
}

/**
 * Get the version number of a file content.
 *
 * @param string $data
 *   The string contains text data to get the version.
 *
 * @param int $lines
 *   (optional) Line numbers to finish the version matching.
 *
 * @return string|int
 *   String contains a version number. 0, no version found.
 *
 * @see dsbox_cron()
 * @see dsbox_get_local_library_version()
 */
function dsbox_get_version($data, $lines = 5) {
  $version = str_replace(array("\r\n", "\n", "\r"), '|', $data);
  $version_arr = explode("|", $version);
  $the_version = 0;

  $i = 0;
  foreach ($version_arr as $val) {
    if ($i > $lines) {
      break;
    }
    $matches = array();
    if (preg_match(DSBOX_LIBRARY_VERSION_PATTERN, $val, $matches)) {
      $the_version = $matches[1];
      break;
    }
    ++$i;
  }

  return $the_version;
}

/**
 * Helper function to obtain an image style.
 *
 * @param string $style_name
 *   The name of an image style.
 *
 * @return object
 *   The image style object.
 */
function _dsbox_get_image_style($style_name) {
  $style = &drupal_static(__FUNCTION__);

  if (!isset($style[$style_name])) {
    $style[$style_name] = ImageStyle::load($style_name);
  }

  return $style[$style_name];
}

/**
 * Helper function.
 *
 * @param array $bundle
 *   The bundles of a field.
 *
 * @param array $field
 *   The field storage config values.
 *
 * @param array $field_view_modes
 *   The display view modes of a field.
 *
 * @return bool
 *   TRUE if a module fieldformatter used, otherwise FALSE.
 *
 * @see dsbox_system_info_alter()
 */
function _dsbox_field_formatter_check($bundle, $field, $field_view_modes) {
  $used = FALSE;
  foreach ($field_view_modes as $view_mode => $name) {
    $display = entity_load('entity_view_display', $field->entity_type . '.' . $bundle . '.' . $view_mode);

    $display_fields = array();
    if ($display) {
      $display_fields = $display->get('content');
      // Check the two fieldformatter id's 'dsbox' and 'dsbox_link'.
      if (isset($display_fields[$field->field_name])) {
        switch ($display_fields[$field->field_name]['type']) {
          case 'dsbox':
            if (isset($display_fields[$field->field_name]['settings']['swipebox_image_style'])) {
              return TRUE;
            }
            break;

          case 'dsbox_link':
            if (isset($display_fields[$field->field_name]['settings']['link_gallery'])) {
              return TRUE;
            }
            break;

          default:
            $used = FALSE;
            break;
        }
      }
    }
  }

  return $used;
}
